// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  uid       String    @unique
  email     String    @unique
  name      String?
  avatarUrl String?
  bio            String?
  skills         String[] 
  interests   String[] 
  experience  Int?     
  location       String?

  projects  Project[] // One-to-many relationship with Project
  matchesSent    Match[]  @relation("SentMatches") 
  matchesReceived Match[] @relation("ReceivedMatches")
  projectInterests ProjectInterest[]
  workspaceMembers WorkspaceMember[]
}

model Project {
  id               Int       @id @default(autoincrement())
  title            String
  description      String?
  skills           String[]  
  tags             String[]  // Tags for categorization (e.g., Open Source, Hackathon)
  createdById      Int
  createdBy        User      @relation(fields: [createdById], references: [id])
  workspace        Workspace?
  projectInterests ProjectInterest[]
}

// New models to support collaboration workflow
model Workspace {
  id          Int               @id @default(autoincrement())
  projectId   Int               @unique
  project     Project           @relation(fields: [projectId], references: [id])
  members     WorkspaceMember[]
}

model ProjectInterest {
  id          Int               @id @default(autoincrement())
  projectId   Int
  project     Project           @relation(fields: [projectId], references: [id])
  userId      Int
  user        User              @relation(fields: [userId], references: [id])
  status      ProjectInterestStatus @default(PENDING)
}

model WorkspaceMember {
  id          Int               @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])
  userId      Int
  user        User              @relation(fields: [userId], references: [id])
  role        WorkspaceMemberRole @default(MEMBER)
}

enum ProjectInterestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum WorkspaceMemberRole {
  OWNER
  MEMBER
}

model Match {
  id                   Int      @id @default(autoincrement())
  senderId             Int
  receiverId           Int
  senderStatus         String   // e.g., "pending", "accepted", "rejected"
  receiverStatus       String   // e.g., "pending", "accepted", "rejected"
  createdAt            DateTime @default(now())
  lastMessage          String?  // Store the last message text
  lastMessageTimestamp DateTime? // Store the timestamp of the last message
  unreadCountSender    Int      @default(0)  // Count of unread messages for the sender
  unreadCountReceiver  Int      @default(0)  // Count of unread messages for the receiver

  sender               User     @relation("SentMatches", fields: [senderId], references: [id])
  receiver             User     @relation("ReceivedMatches", fields: [receiverId], references: [id])
}



